#################################################
# This file contains code to read voter data into R and start to analyze it.
#	When you open an R or RStudio session, execute this file with the 
#	source() command. It will retrieve and execute the pre-written
#	programs within, skipping all lines that begin with #.
#################################################

# *** Only need to execute this command once.
# *** It installs a bunch of R functions that we'll need.
# install.packages("tidyverse")

library(tidyverse)		# Do execute this every time you open a new R session.

# Use the tsv file (by saving it into a dataframe named "data").
# sep="\t" says to read it as a tab-delimited file
# c("", "NA") says to change all the blanks into "NA" to make sure they are included in counts
read.tsv <- function(pFilePath)
{
	read.csv(pFilePath, header=TRUE, sep="\t", na.strings = c("", "NA"))
}
data <- read.tsv("BerkeleyVoters.tsv")

# Display the column headings in "data" 
header <- head(data,0)	# retrieve the headings but 0 lines of data
header				# list them on the screen


#################################################
## DATA CLEANUP SECTION
#################################################

# display precincts with NA district
# View(data[is.na(data$district), "precinct"])
# gives "invalid 'x' argument" if no NA district entries
# shouldn't be any more

# how many non-blank mail_country rows are there?
#length(data[!is.na(data$mail_country), "voter_id"])

# there's only one of these : mail_country but no local zip
#length(data[!is.na(data$mail_country) & is.na(data$zip), "voter_id"] )

# get all rows with non-empty mail_country
x <- function()
{
	data %>%
	filter(!is.na(data$mail_country)) %>%
	View()
}

# show voter ids where mail_country is "USA"
z <- function()
{
	data %>%
	filter(!is.na(mail_country) & mail_country == "USA") %>%
	select(voter_id)
}

# show all out of country
zz <- function()
{
	data %>%
	filter(!is.na(mail_country) ) %>%
	select(any_of(c("voter_id","care_of","mail_street","mail_city","mail_state","mail_zip","mail_country")))
}

# show more bad data : city == ALBANY
# also do the same for OAKLAND
zz <- function()
{
	data %>%
	filter(city == "ALBANY" ) %>%
	select(any_of(c("voter_id","street", "mail_street", "city")))
}
#head(zz())


#################################################
# some exploration in R
#################################################

lastElection <- factor(data$X11.08.2022.november.8.2022.statewide.general.election)
#levels(lastElection)

# "A" - they voted by mail
# "N" - they were eligible but did not vote
# "V" - they did vote (presumably in person?)
# "NA" - none of the above (blank):
#          that election occurred before this voter registered, OR
#          that election was a local one in which this voter was not qualified to vote

# See the HISTORY CODE FOR VOTER HISTORY-2023.pdf file for voting history info 
# including the codes, that was sent to us from digital.services@acgov.org


# Plot a simple bargraph
#plot(lastElection)

# Display the totals
#summary(lastElection)
maxVoter <- max(data$voter_id)		# retrieve the highest voter ID number

# Get one field's data
dataFromColumn <- function(pColumn)
{
	cD = factor(data[[pColumn]])
}
x = dataFromColumn("precinct")

#################################################
#  Start creating simple bar charts to visualize and compare the data by district
#  https://stats.oarc.ucla.edu/r/faq/how-can-i-add-features-or-dimensions-to-my-bar-plot/
#################################################

# The randomColor() function selects a random color each time it is used.
# So when we select a random color for each item (district, address type, etc.), the
# bar chart will have a different set of random colors each time it is executed.
# The factor of 16 is to ensure colors that have at least 16 levels of difference from each other.
randomColor <- function()
{
	colors()[sample.int(657/16,1)*16]
}

# add labels for our internal codes and space for local
# might want a similar function to eliminate "local"

addressLabelFor <- function (x, ifany = FALSE, as.string = TRUE)
{
    if (!is.factor(x)) 
        x <- factor(x)
    if (ifany & !any(is.na(x))) 
        return(x)
    ll <- levels(x)
    if (!any(is.na(ll))) 
        ll <- c(ll, NA)
    x <- factor(x, levels = ll, exclude = NULL)
    if(as.string) levels(x)[is.na(levels(x))] <- "Other" # local address
	if(as.string) levels(x)[levels(x) == "XC"] <- "Out of Country"
    if(as.string) levels(x)[levels(x) == "XS"] <- "Out of State"
    if(as.string) levels(x)[levels(x) == "XM"] <- "Out of Mind"
    if(as.string) levels(x)[levels(x) == "XO"] <- "Out of Order"
    if(as.string) levels(x)[levels(x) == "XA"] <- "Apartment"
    if(as.string) levels(x)[levels(x) == "XD"] <- "Student Dorm"
    if(as.string) levels(x)[levels(x) == "XN"] <- "No street address"
	x
}

voterStatusFor <- function(x, ifany = FALSE, as.string = TRUE)
{
    if (!is.factor(x)) 
        x <- factor(x)
    if (ifany & !any(is.na(x))) 
        return(x)
    ll <- levels(x)
    if (!any(is.na(ll))) 
        ll <- c(ll, NA)
    x <- factor(x, levels = ll, exclude = NULL)
	if(as.string) levels(x)[levels(x) == "A"] <- "By mail"
    if(as.string) levels(x)[levels(x) == "N"] <- "Didn't vote"
    if(as.string) levels(x)[levels(x) == "V"] <- "In person"
	x
}

plotColumn <- function(pColumn, pLegend="legend", pTitle="your name here", pUseLegend=TRUE)
{
	columnData <- summary(addNA(data[[pColumn]]))
	xx <- barplot(
		columnData,
		xlab = pColumn, ylab = "number of voters",
		main = pTitle,
#		names = columnData,
		names = levels(addressLabelFor(data[[pColumn]])),		# add readable names
		col = c(randomColor(), randomColor(), randomColor(), randomColor(), randomColor()),
		legend = levels(addressLabelFor(data[[pColumn]])),
		args.legend = list(title = pLegend, x = "top", cex = .7), ylim = c(0, max(columnData))
	)
	text(x = xx, y = max(columnData)/2, label=columnData, pos=3, cex=2, col="black")
}

#plotColumn("Xmail_to", pTitle="Mail Prospects")
#plotColumn("Xreg_at", pLegend="Residence Type", pTitle="Walkability")


# same plot with random colors
plotStackedColumnByDistrict <- function(pColumn, pLegend="legend", pTitle="your name here", pUseLegend=TRUE)
{
	columnData <- summary(factor(data$district)) # total number of voters
	tabl <- table(addressLabelFor(data[[pColumn]]), data$district)
	districtNames <- levels(factor(data$district))
	xx <- barplot(
		tabl,
		xlab = "District", ylab = "Number of voters",
		main = pTitle,
		names = districtNames,
		col = c(randomColor(),
			randomColor(),
			randomColor(),
			randomColor(),
			randomColor(),
			randomColor(),
			randomColor(),
			randomColor(),
			randomColor()),
		legend = levels(addressLabelFor(data[[pColumn]])),
		args.legend = list(title = pLegend, y=max(columnData)+700)
	)
	text(x = xx, y = max(columnData)/2, label=columnData, pos=3, cex=1, col="black")
}

#plotStackedColumnByDistrict("Xreg_at", pLegend="Residence type", pTitle="Walkability")
#plotStackedColumnByDistrict("Xmail_to", pLegend="Residence type", pTitle="Local mailing addresses")


###################################################################
## Data exploration using tidyverse (which uses the ggplot2 library for more design control over plots)
###################################################################

# Show number of voters in each district
showVotersBy <- function(columnName)
{
	data %>%
	select(all_of(columnName)) %>%		# get all districts
	count(data[[columnName]]) %>%		# count the rows assigned to each district
	arrange(desc(n)) %>%				# sort in descending number of rows (voters)
	View()
}
#d = showVotersBy("district")		# simple chart of total number of voters in each district


#################################################
## VOTER FUNCTIONS
#################################################

# The dates of the last three presidential elections:
election2020Date = "11.03.2020"
election2016Date = "11.08.2016"
election2012Date = "11.06.2012"

votedIn2020 <- function(df)
{
	df %>%
	filter(
		(X11.03.2020.2020.presidential.election == 'A') |	# either by mail ("absentee") or
		(X11.03.2020.2020.presidential.election == 'V')	# voted in person
	)
}

votedIn2016 <- function(df)
{
	df %>%
	filter(
		(X11.08.2016.2016.general.election == 'A') |
		(X11.08.2016.2016.general.election == 'V')
	)
}

votedIn2012 <- function(df)
{
	df %>%
	filter(
		(X11.06.2012.general.election == 'A') |
		(X11.06.2012.general.election == 'V')
	)
}


###############################################
## Functions to find new voters who have turned 18 as of 2020 or 2024
###############################################

# Young voters who turned 18 after the 2016 election but before the 2020 election.
# These may or may not have registered in time to vote in the 2020 presidential election.
possibleYoungVotersIn2020Election <- function(df)
{
	df %>%
 	# birth_date > 18 years before 2016 presidential election
 	# and birth_date < 18 years before 2020 presidential election
	filter(mdy(birth_date) > mdy("11.08.1998")) %>%
	filter(mdy(birth_date) < mdy("11.03.2002"))
}

# Young voters who turned 18 after the 2016 election but before the 2020 election,
# AND who registered to vote in time for the 2020 presidential election.
# Have to ignore NAs because some voters were of age but only registered AFTER the 2020 election
youngRegistrantsIn2020Election <- function(df)
{
	possibleYoungVotersIn2020Election(df) %>%

	# But ignore those who had not yet registered to vote in the 2020 election.
	# Here we could filter on original_reg_date but not is.na does the job
	filter(!is.na(X11.03.2020.2020.presidential.election))
}

# Young voters who turned 18 after the 2020 election but before the 2024 election,
# and who are currently registered to vote.
# (Our data only contains people who have registered for at least one election as of December 2023.)
youngRegistrantsIn2024Election <- function(df)
{
	df %>%
 	# birth_date > 18 years before 2020 presidential election
 	# and birth_date < 18 years before 2024 presidential election
	filter(mdy(birth_date) > mdy("11.03.2002")) %>%
	filter(mdy(birth_date) < mdy("11.05.2006"))
}


#################################################
## 2024 ELECTION DATAFRAMES
#################################################

# Get counts by district of everyone who voted in the last three presidential elections
dfVotedIn3 <-
	data %>%
	votedIn2020() %>%
	votedIn2016() %>%
	votedIn2012() %>%
	group_by(district, Xreg_at) %>%
	tally()

# Get counts of all voters by residence type within each district
dfResidenceTypeByDistrict <-
	data %>%
	group_by(district, Xreg_at) %>%
	tally()		# calculate the voter counts per district
#View(dfResidenceTypeByDistrict)

# Get counts of young registrants who turned 18 since the 2020 presidential election
# who are in residences other than dorms or apartments
dfYoungLocalAddressRegistrantsIn2024Election <-
	data %>%
	filter(is.na(Xreg_at)) %>%			# local addresses only
	group_by(district, Xreg_at) %>%
	youngRegistrantsIn2024Election() %>%
	tally()		# calculate the voter counts per district

# Get counts of ALL young registrants who turned 18 since the 2020 presidential election
# by type of residence
dfYoungRegistrantsByResidenceType <-		# includes all types of address
	data %>%
	group_by(district, Xreg_at) %>%
	youngRegistrantsIn2024Election() %>%
	tally()		# calculate the voter counts per district

# Get counts by residence type within each district
dfResidenceTypeByDistrict <-
	data %>%
	group_by(district, Xreg_at) %>%
	tally()
#View(dfResidenceTypeByDistrict)

#################################################
## 2020 ELECTION DATAFRAMES
#################################################

# Young voters who turned 18 after the 2016 election and before 2020 presidential election.
# These were all eligible to vote in the 2020 election but may not have registered or voted by then.
dfPossibleYoungLocalAddressVotersIn2020Election <-
	data %>%
	possibleYoungVotersIn2020Election() %>%
	filter(is.na(Xreg_at)) %>%					# local addresses only
	group_by(district, Xreg_at) %>%
	tally()		# calculate the voter counts per district

# Young voters who turned 18 after the 2016 election and and registered before 2020 presidential election
dfYoungLocalAddressRegistrantsIn2020Election <-
	data %>%
	youngRegistrantsIn2020Election() %>%
	filter(is.na(Xreg_at)) %>%					# local addresses only
	group_by(district, Xreg_at) %>%
	tally()		# calculate the voter counts per district

# Same as above but show counts for all residence types
dfYoungRegistrantsIn2020ElectionByResidenceType <-	# includes all types of address
	data %>%
	youngRegistrantsIn2020Election() %>%
	group_by(district, Xreg_at) %>%
	tally()		# calculate the voter counts per district


# We want to see actual turnout in 2020 for young voters who turned 18 after the 2016 election
dfYoungVoterTurnoutIn2020Election <-				# includes all types of address
	data %>%
	youngRegistrantsIn2020Election() %>%
	votedIn2020() %>%
	group_by(district, Xreg_at) %>%
	tally()

# This dataframe allows us to see how many young registered voters actually voted in 2020
df2020YoungVotersByVotedStatus <-		# includes all types of address
	data %>%
	youngRegistrantsIn2020Election() %>%
	group_by(district, X11.03.2020.2020.presidential.election) %>%
	tally()


#################################################
# INFO ABOUT RESIDENCE AND MAILING ADDRESSES
#################################################

# To include blanks in totals, use the addNA() function

# Summarize the current registered address data.
# NOTE: data$no_local_addr is a new column we created to tell whether an address is an apartment ("XA"),
#	a student dorm ("XD"), missing entirely, probably homeless ("XN"), or "NA" (none of the above,
#	i.e. a local address in Berkeley that is not an apartment or dorm).
# NOTE that there are a small number of voters registered at the Berkeley Marina/Yacht Club,
#	Peet's Coffee (Walnut/Vine), and other non-home addresses. They are lumped in with the
#	other local addresses.

#levels(data$addNA(data$no_local_addr))	# list the codes for registered-at address types ("XA, etc.)
#summary(addNA(data$no_local_addr))		# show the number of voters at each reg address type


# Summarize the current mailing address data
# NOTE: data$no_local_mail_addr is the second new column we created, to tell whether a mailing address 
#	is out of country ("XC"), out of state ("XS"), or none of the above ("NA") i.e. local.
# Note that most voters do not have a different mailing address

#levels(data$addNA(data$no_local_mail_addr))	# list the codes for mailing address types ("XC", etc.)
#summary(addNA(data$no_local_mail_addr))		# show the number of voters for each mailing address type


#################################################
## WAYS TO SAVE A PLOT FOR LATER DISPLAY OR PRINTING
#################################################

# Create the plot and save it to a pdf file (without looking at it on screen first)
#pdf(file="voters3.pdf")	# open a (new or existing) pdf file to write to
#					# create the plot
#plotStackedColumnByDistrict("Xmail_to", pLegend="Residence type", pTitle="Local mailing addresses")
#dev.off()				# close the pdf file (it now appears in your system's default directory)

# Save the currently-displayed plot to a pdf file (voters3 in this case)
#ggsave("voters4.pdf")
# "plot=plotname" to specify a particular plot

# Save a particular named plot to a pdf file
#pdf(file="voters3.pdf")
#print(voters3)
#dev.off()


#################################################
## PLOTS functions
#################################################

setLegendTitleTo <- function(legendTitle)
{
	guides(fill=guide_legend(title=legendTitle))	# simplify legend title to be displayed
}

# eliminate unnecessary x-axis tick marks and labels
eliminateTicks <- function()
{
	theme(
		axis.text.x = element_blank(),
		axis.ticks.x = element_blank()
	)
}

# Create a template for bar chart plots, which includes the pieces that all our bar charts will
# have in common, and sets up defaults for each of them.
# This helps to avoid repeating the same commands in multiple charts.
# 
barchartPlot <- function(df=data,		# the defaults are set in this section
	xColumn="Xreg_at",
	barTextOffset,
	gTitle, xLabel="", yLabel="", legendTitle="",
	wrapBy="district")
{							# this section applies the barchart specifications
	df %>%
	ggplot(aes(x=df[[xColumn]] )) +
	geom_col(aes(x=df[[xColumn]], y=df$n, fill=addressLabelFor(df[[xColumn]])))+
	geom_text(aes(x = df[[xColumn]], y=df$n+barTextOffset, label = df$n), size=4) +

	labs(title=gTitle, x=xLabel, y=yLabel) +
	setLegendTitleTo(legendTitle) +

	# eliminate unnecessary x-axis tick marks and labels
	eliminateTicks()
}

# Create a template for facet plots, which contain a separate barchart for each district.
# The facetPlot() function starts with the barchartPlot() model, but must include a 
# second function called facet_wrap().
facetPlot <- function(df=data,		# the defaults are set in this section
	xColumn="Xreg_at",
	barTextOffset,
	gTitle, xLabel="", yLabel="", legendTitle="",
	wrapBy="district")
{							# this section applies the facet plot specs
	df %>%
	barchartPlot(xColumn, barTextOffset, gTitle, xLabel, yLabel, legendTitle, wrapBy) +
	facet_wrap(df[[wrapBy]])	# make a separate chart for each district
}

#################################################
## 2020 ELECTION DATA PLOTS
#################################################

# Voters reaching age 18 after the 2016 presidential election and before the 2020 election
possibleYoungLocalAddressVotersIn2020Election <- barchartPlot(
	dfPossibleYoungLocalAddressVotersIn2020Election,
	"district",
	barTextOffset=10,

	gTitle="18-22 year olds as of the 2020 presidential election by district\n(not counting apartment or student dorm residents)",
	xLabel="District", yLabel="Number of voters",	legendTitle="District"
)
possibleYoungLocalAddressVotersIn2020Election

# Young registered voters in the 2020 election, not counting apartment or student dorm residents
youngLocalAddressRegistrantsIn2020Election <- barchartPlot(
	dfYoungLocalAddressRegistrantsIn2020Election,
	"district",
	barTextOffset=10,

	gTitle="Young registered voters as of the 2020 presidential election by district\n(not counting apartment or student dorm residents)",
	xLabel="District", yLabel="Number of voters",	legendTitle="District"
)
youngLocalAddressRegistrantsIn2020Election

# Young registered voters in the 2020 election, by residence type
youngRegistrantsIn2020ElectionByResidenceType <- facetPlot(
	dfYoungRegistrantsIn2020ElectionByResidenceType,
	barTextOffset=40,

	gTitle="Young voter registration in the 2020 presidential election by residence type",
	xLabel="District", yLabel="Number of voters", legendTitle="Residence type"
)
youngRegistrantsIn2020ElectionByResidenceType

# Young registered voters in the 2020 election who actually voted
youngVoterTurnoutIn2020ElectionByResidenceType <- facetPlot(
	dfYoungVoterTurnoutIn2020Election,
	barTextOffset=25,
	legendTitle="Residence type",
	gTitle="18-22 year old voters' actual turnout in 2020 presidential election by residence type",
	xLabel="District",
	yLabel="Number of voters"
)
youngVoterTurnoutIn2020ElectionByResidenceType

# This variation shows actual status ("By mail, Didn't vote, In person, NA") for voter status
howManyYoungRegisteredVotersActuallyVotedIn2020_A <-
	df2020YoungVotersByVotedStatus %>%

	ggplot(aes(x=n)) +
	geom_col(aes(x=X11.03.2020.2020.presidential.election, y=n, fill=voterStatusFor(X11.03.2020.2020.presidential.election))) +
	labs(title="How many young registrants actually voted in 2020 presidential election\n(by district)",
		x="District",
		y="Number of voters") +
	geom_text(aes(x = X11.03.2020.2020.presidential.election, y = n+25, group=district, label = n), size=4) +
	# eliminate unnecessary x-axis tick marks and labels
	eliminateTicks() +
	facet_wrap(df2020YoungVotersByVotedStatus$district) +	# make a separate chart for each district
	setLegendTitleTo("Voter status")
howManyYoungRegisteredVotersActuallyVotedIn2020_A

# This variation shows "A,N,V,Other" for voter status
howManyYoungRegisteredVotersActuallyVotedIn2020_B <- facetPlot(
	df2020YoungVotersByVotedStatus,

	"X11.03.2020.2020.presidential.election",
	barTextOffset=25,
	legendTitle="Voter status",
	gTitle="How many young registered voters actually voted in the 2020 presidential election\n(by district)",
	xLabel="District",
	yLabel="Number of voters",
	wrapBy="district"
)
howManyYoungRegisteredVotersActuallyVotedIn2020_B

#################################################
## CURRENT (2024 ELECTION) DATA PLOTS
#################################################

# Voters reaching age 18 after the 2020 presidential election
# NOTE: our data from the registrar of voters is as of December 2023.
# More students (especially district 7) will be turning 18 and registering in this year.
# We will probably also see more students moving into district 4 apartments and changing their registration.
# The 2024 new voter registration levels are currently approximately 75% of the 2020 levels.

youngRegistrantsIn2024Election <- 
	dfYoungLocalAddressRegistrantsIn2024Election %>%
	ggplot(aes(x=n)) +
	expand_limits(y=c(0, 500)) +
	geom_col(aes(x=district, y=n, fill=as.factor(district)))+
	scale_x_continuous(breaks=1:8) +
	labs(title="Young voters for the 2024 presidential election by district,\nat walkable addresses (not in dorms or apartments)",
		x="District",
		y="Number of voters") +
	geom_text(aes(x = district, y = n+10, group=district, label = n), size=4) +
	setLegendTitleTo("District")

youngRegistrantsIn2024Election		# create plot on screen

# Voters reaching age 18 after the 2020 presidential election with separate residence type bars
youngRegistrantsIn2024ByResidenceType <-facetPlot(
	dfYoungRegistrantsByResidenceType,
	barTextOffset=30,
	legendTitle="Residence type",
	gTitle="Young voters in 2024 presidential election by residence type",
	xLabel="District",
	yLabel="Number of voters"
)
youngRegistrantsIn2024ByResidenceType

# Plot voters who have voted in the last 3 presidential elections
votedInAll3 <- facetPlot(
	dfVotedIn3,
	barTextOffset=300,
	legendTitle="Residence type",
	gTitle="Active voters in all last 3 presidential elections (2012,2016,2020)"
)
votedInAll3

# Plot voter type by district
# Use one bar per residence type (4 for each district graph)
votersPerResTypeIn2024 <- facetPlot(
	dfResidenceTypeByDistrict,
	barTextOffset=500,
	legendTitle="Residence type",
	gTitle="All registered voters in 2024 per residence type"
)
votersPerResTypeIn2024

